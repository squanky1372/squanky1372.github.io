[
  {
    "Project_Name": "Trains",
    "Project_Number": "1",
    "Overview": "I have always had a fascination with trains.  However, I didn’t grow up in a place that had many at all.  Because of this, when I moved to Chicago for school, I fell in love with the “L” train system of the Chicago Transit Authority (CTA).  For one of my classes, I was told to visualize data from an API, and when looking into available ones to use, I found out that the CTA has an accessible <a href=”https://www.transitchicago.com/developers/traintracker/”>API</a>, which allows accessing of so much of the data associated with their trains, including but not limited to their exact coordinates.  I quickly set about creating a web app to make use of this new information, and from there I have expanded to new locations and scopes.<br><br>In 2022, I created a now-defunct program that would take the CTA data and convert each trains’ latitude, longitude, and heading into x, y, and theta values on the screen, where I would position a small circle with an arrow pointing in the heading direction.  Since the CTA also has positional information for the train stations, I made smaller dots for those as well.  I even color coded the trains based on what line color they are.  However, due to my limited knowledge of internet transmissions, I was unable to make this program function properly.  I kept getting a CORS error, which I now know can be prevented by serving the data from an actual server rather than attempting to pull it into a static webpage.  Now that I know how to use NodeJS and have my own server, I set about trying to make more functional train programs.",
    "Next_Steps": "It would be nice to eventually go back and repair the program that started it all- the Chicago train program. Now that the Boston one is working, it pains me to see the Chicago one get abandoned before reaching its full potential."
  },
  {
    "Project_Name": "Open House",
    "Project_Number": "2",
    "Overview": "This project is not something I will be sharing information about on this page, since it is a personal gift for someone very close to me.  It’s an ongoing project, which has spanned over several years, and is still in the works.  While I will not describe it, I will still document when weeks of my time have been dedicated to this project, just for completion’s sake.",
    "Next_Steps": "I’ll be continuing this project in the next year, and to the indefinite future."
  },
  {
    "Project_Name": "Words",
    "Project_Number": "3",
    "Overview": "I'm a big fan of word games.  I enjoy games like the NYT Mini Crossword (LINK) and Scrabble, and I was really into Wordle even before Wordle existed (I used to play it one-on-one on paper, or against AI) (LINK).  I also like analyzing data.  Because of this, I’ve become interested in using word analysis tools.  I have frequented this website (LINK: codebreaker website) to use their tools in making my own little puzzles or just making interesting word grids and such.  However, I realized it would also be interesting to make my own tools for specialized purposes. <br><br>In 2022, I made a program that analyzes all of the words in the dictionary that Wordle uses, and which creates a graph to display the frequency of letters in different positions.  Below is an image of the result: the first five rows correspond to the five different letters in the words, and the sixth row corresponds to the overall frequencies of letters.  The last row is just a monospaced row for reference.<br><br><br><div style=\"text-align: center\"><img src=\"./images/wordle.png\" width=\"50%\" height=\"50%\"><div><br> Image of wordle words",
    "Next_Steps": "This program can be revamped in several ways.  First of all, it makes much more sense to pre-process the 5x5 grids across all words, and then have the user interface simply search among the pre-processed list for grids that abide by the constraints.<br><br>It would also be nice to run through the full list of 5 letter words using something akin to an out-of-use laptop for processing.  That would work nicely with the previous statement as well.<br><br>In addition, I would like to be able to input non-words into the grid.  For example, if I put the constraints that the top row should read “qwxyz”, I will get no matches because no words have those letters in that order.  However, I would like to modify my code so that if a user specifies an entire row or column, this word will be added as a valid entry, allowing the user to functionally add their own words into the mix.  This would be helpful for creating puzzles with a personal twist, using inside jokes or proper nouns.  However, this conflicts with the previous statements because this cannot be pre-processed."
  },
  {
    "Project_Name": "Weather",
    "Project_Number": "4",
    "Overview": "After discovering the wonders of APIs, the first and most prevalent type of data I found to be available was weather data.  Since I’ve always been interested in unconventional representation of information, I decided to make my own ways to view weather information.  I quickly found a provider of weather data via API (<a href=’https://www.visualcrossing.com/’>VisualCrossing</a>) and began experimenting with different ways to convey the data provided.<br><br>Data provided by this API includes hourly information for the next 15 days, including precipitation, temperature, “feels like” temperature, wind gust, wind speed, snow depth, precipitation probability, and snow.  It also provides information on daily sunrise, sunset, and moon phases.",
    "Next_Steps": "There are several pieces of data that can be requested from the VisualCrossing weather API.  It apparently has the capability to provide past weather data for any date range, as well as provide future weather data at any point in the future based on past years and predictions.  I have always had it in the back of my mind to expand my weather app’s functionality to allow you to see average weathers for any location at any time of year, just for things like future trips or moving to a new city."
  },
  {
    "Project_Name": "Discord",
    "Project_Number": "5",
    "Overview": "All of the input and output methods I have used, whether it be through interactive webpages, or wireless terminal access, or even an LED ring, have been very interesting.  However, the way that most people like to get their information and interact with lies outside of all of these systems.  Most people want to put in as little effort as possible to see things like the weather, or the train schedule.  One of the easiest ways to get information to people is by sending them a message on their phone.  I recently realized that Discord bots can easily be integrated with NodeJS, and decided to try to incorporate this into my system.  ",
    "Next_Steps": "I hope to be able to implement several aspects of my Router system into a Discord bot.  Namely, I would be able to do the following: <br>    -Retrieve the weather data, either for specifically Boston, or from a location of the user’s choosing, depending on the level of complexity. <br>    -Retrieve the train data, either for specifically my two most used stations, or for two stations of the user’s choosing, depending on the level of complexity.<br>    -Send a message into the Router system.  This would include things like the “weather” and “train” commands, which would then change the Neopixel ring.  It would also include the “lights” command, which would actuate the lights."
  },
  {
    "Project_Name": "Joystick/Car",
    "Project_Number": "6",
    "Overview": "This is a fairly lax project category, created to house some fairly unrelated tests I’ve done.  The first involves creating my own framework for testing game controllers similar to this website <a href=’https://hardwaretester.com/gamepad’, but in a way that more directly suits my own needs.  The second is a simple driving game that is yet to be fully realized.",
    "Next_Steps": "Eventually, I’d like to return to this project and continue working on the car game.  I feel like it could be a fun project to pursue now that I have a better understanding of P5, but I have yet to understand simulated car physics well enough to implement a system that feels good.  I would need to go back and tinker with settings and formulas to hopefully get it so that driving feels right, and then I could work on making the game itself more complete.  I could also go back and add online multiplayer support now that I know how to make a NodeJS server."
  },
  {
    "Project_Name": "Chords",
    "Project_Number": "7",
    "Overview": "Outside of my life as an engineer, I enjoy music.  In addition to listening to songs, I have a baseline understanding of how to play piano, and I’ll play songs that I enjoy.  I also dabble in music theory, though my understanding of it is very primitive.  I’ve recently become fascinated by something called “non-diatonic chords” (which I’ll abbreviate to NDCs), which are chords that are not part of the key that a song is based in.  NDCs give a song a very unique feel, and I love trying to find new songs with them and identifying which chords in said songs are NDCs.  However, I sometimes find it hard to identify exactly which chords in these songs are the NDCs, and which are part of the key the song is in.  As an added complexity, NDCs make it harder to identify exactly which key a song is in.  For all of these reasons, I decided to make this simple program that allows me to input what chords are present in a song, and which then helps suggest to you which key this song is most likely to be.",
    "Next_Steps": "I have no immediate plans to expand upon this project.  However, I might in the future return and add new features, if I am able to find any that I am interested in."
  },
  {
    "Project_Name": "Stereogram",
    "Project_Number": "8",
    "Overview": "Stereograms are very cool.  In case you haven’t heard of them, they are those hidden-eye pictures that look like nothing unless you cross your eyes in just the right way.  Here’s an example of one:<br><br><br><div style=\"text-align: center\"><img src=\"images/stereogram-1.png\\\" width=\"50%\" height=\"50%\"><br> Example of a Stereogram- shows an airplane.<div><br>I highly recommend doing your own research on how to view stereograms and learning it, because it’s such a fun skill to have and you get to brag to your friends that you can see it and they can’t.  The principle works in the same way as how the human body interprets distance with our eyes- things that we need to cross our eyes more for are closer.  Stereograms hijack that part of the brain by artificially having two slightly different images layered on top of each other, and crossing your eyes in just the right way makes our brains interpret the slight differences as a height map, which we see as a 3D image.  It’s similar to how 3D glasses work.  Anyways, in this project I wanted to see if I could generate my own stereograms, and more importantly, generate moving ones.  I was partially inspired by this excellent music video by Young Rival made entirely by stereograms, which you can find <a href=\"https://www.youtube.com/watch?v=2AKtp3XHn38\">here</a>- if you learn how to view stereograms, you’ll be absolutely amazed by this video!  I used <a href=\"https://www.ime.usp.br/~otuyama/stereogram/basic/index.html\">this webpage</a> as a good guide on how random dot stereograms work, and it’s worth a look if you’re interested in how all of this functions.",
    "Next_Steps": "In the future, it would be interesting to take this concept and expand it to something more worthwhile.  One example could be to have a game played entirely inside of a stereogram.  Or, I could make some sort of 3D animation.  However, further exploration is hampered by my reduced ability to create animations or easily translate them into this format."
  },
  {
    "Project_Name": "MorseMate",
    "Project_Number": "9",
    "Overview": "I have already prepared a presentation on this project, and so I decided that rather than reiterate all of the points that I cover in that presentation, I would instead provide a link to the <a href=\"https://docs.google.com/presentation/d/1OggzUqaZnA4_FEmdUtV57UbtNDFax9_o4AhMyprNJ6M/edit?usp=sharing\">slides</a> in case you’re interested in taking a look. All of my updates will be based on the assumption that you have gone over the slides.",
    "Next_Steps": "While the final submitted version of this project is something I am uniquely proud of, there are several optimizations to be made. It would be ideal to make a more form-fitting case that reduced the sharpness of the edges and minimized the empty space within it.  This might also mean reworking the layout of the other parts to be more properly distributed to support a more streamlined geometry.  It is also completely possible to use the device without the screen, albeit more difficult, and a screenless version would certainly be smaller."
  },
  {
    "Project_Name": "Accel/Gyro Cube",
    "Project_Number": "10",
    "Overview": "This was another quick project that I decided to make.  This was spurred by a recent obsession with accelerometer and gyroscope data, although I forget what initially piqued my interest in that topic.  I decided that I would like to be able to have a visual representation of tilt via a visualization of a 3D cube that rotates.  I had acquired an Arduino module that had a linear accelerometer and knew that it was possible to read the pitch and roll by finding what direction the accelerometer is detecting “down” to be due to gravity.  ",
    "Next_Steps": "This project was an excellent proof of concept, which taught me some of the basics of Node.JS, how to establish serial communication in it, and how to use Socket.IO to push that data to the client.  However, other than showcasing these attributes, I have no need for continuing this project as is.  I now have the ability to send this data as Bluetooth controller analog inputs, which negates the need for such a complicated (and purely wired) setup to achieve the same result."
  },
  {
    "Project_Name": "Router",
    "Project_Number": "11",
    "Overview": "While most of my projects function as standalone programs on my machine, it is preferable to me that they be both accessible from anywhere and compiled into one location.  For this reason, I have created a few central locations to both host and access my programs. <br><br>The first of these is a rather simple but unique homepage which contains links to all of my other programs.  What I decided to do is to create a page that displays several rotating cubes, displayed in 3D by <a href=”https://threejs.org/”>Three.JS</a>.  Each of these cubes has a pixel art representation of one of my webpages, and clicking on one of them redirects you to that webpage.  I find it rather quaint, and the lack of any description of any of these webpages means anyone who happens upon the site must simply judge from the icon what webpage they will be taken to, and then see for themselves where they end up.  I call this system my “spinning cubes” homepage. <br><br><br><div style=\"text-align: center\"><img src=\"images/router-1.png\" width=\"50%\" height=\"50%\"><br>Spinning Cubes homepage.</div><br><br><br>The second is a server to host my dynamic projects.  The various programs hosted on this server also are linked to in my spinning cubes homepage.",
    "Next_Steps": "Even though I don’t play Minecraft very much anymore, it would still be nice to fulfill that childhood dream by hosting a server on my Raspberry Pi."
  },
  {
    "Project_Name": "Jeopardy",
    "Project_Number": "12",
    "Overview": "Answer: Me!  Question: Who likes Jeopardy?  I love Jeopardy, but don’t have the right set of skills to participate in the real deal.  I also tried to play an online version of Jeopardy with some friends, but in the end it wasn’t very enjoyable because it was hard to be fair without some sort of show host to guide the game.  However, one day I had the brilliant idea that instead of being a contestant, I could host my own game!  Thus began my quest to create a Jeopardy round to host for my friends.",
    "Next_Steps": "I would like to fix the buzzer app, although I suspect that this would be difficult to debug without rebuilding it from the ground up.  However, in the event that I find a good occasion to make another round of Jeopardy for my friends, I would love to be able to have a successful buzzer system.  Necessity is the mother of invention, and when an occasion makes it necessary for me to have the buzzers ready, I’m sure I’ll be back to fix it.<br><br>I also would like to further expand my JSON-to-CSV app to include a reverse translator that converts back to JSON, or to just make the Jeopardy app take in CSV files to begin with.  That way, I could do all of my question and answer planning in a spreadsheet and import it easier."
  },
  {
    "Project_Name": "Ring",
    "Project_Number": "13",
    "Overview": "This project was started after I took a trip down to MicroCenter, and decided to browse in the microelectronics section to see if I could find anything that stood out to me as inspiration for a future project.  I managed to find a neat <a href=”https://www.adafruit.com/product/1586?gad_source=1&gclid=CjwKCAiAnL-sBhBnEiwAJRGiggEOz8cfgA-WHAvD1Yj5aao3piqfAExSdZ7aISbf7XDhjh6x2cN9OxoCnzMQAvD_BwE”>Adafruit Neopixel ring<a/>, and decided on a whim to buy it and see what I could do with it.  This nifty device has 24 RGB LEDs arranged in a ring, with the center completely empty.  It interfaces with a microcontroller over just one data in wire, and can be chained with other neopixels though a data out wire.  It can get really bright when given full power, but even running off of a microcontroller’s 5V output, and set to 50% brightness, it’s pretty bright.  There wasn’t really a goal at the start of this project, but now I’m thinking it makes a pretty good HUD for various bits of data.",
    "Next_Steps": "I am searching for more things that would make sense to display in this visual medium.  I am also looking into something of a notification system in which useful information would be displayed to the screen without user input.  I would also like to explore making a diffusion layer in front of the pixels so that the colors are more identifiable."
  },
  {
    "Project_Name": "Rec-All",
    "Project_Number": "14",
    "Overview": "A few years ago, I was working a job which involved the setup and configuration of several servers in an identical way.  It was very repetitive, and I thought it would make things a lot easier if I could paste lines of code into the servers.  However, the nature of the work did not allow me to install my own programs onto them, sadly.  As I moved my keyboard from one machine to the next, I thought about how interesting it would be for the keyboard itself to store various strings of text which I could then paste into each machine I connected to.  As far as I’m aware this functionality would be impossible to implement in anything similar to a normal keyboard, since keyboards cannot retrieve information about the content that is selected on the user’s machine, but I thought of an interesting alternative.  I could create a gadget with many buttons that simulates a keyboard, where each button would type out an entire string of text.  This idea evolved and expanded until I reached my final idea: a modular macro pad with configurable functions for each button.<br><br>The main idea involves having three types of parts: one or more dongles which plug into the machines you want to type into, a core board that broadcasts the desired strings or keystrokes to the dongles, and modular button pads that each serve different configurable functions.  These all come together to make a highly configurable system that can accomplish things like emulate shortcut keys, paste long strings of text into the terminal, or act as a MIDI keyboard.",
    "Next_Steps": "This project still needs a lot of work to become a viable product.  One of the parts of the original project was for the functionality of each button pad to be user configurable.  Right now this is technically possible by modifying the Arduino code and reuploading it, but this is far from ideal.  It is necessary to provide some sort of interface for users to be able to modify the functionality of buttons without accessing the code directly.  "
  },
  {
    "Project_Name": "Multiplayer",
    "Project_Number": "15",
    "Overview": "Everybody loves games, and they become even more fun when you can play them with other people.  With <a html=”https://nodejs.org/”>Node.JS</a> and <a html=”https://socket.io/”>Socket.IO</a> as more tools in my toolkit, I felt capable of creating my own online multiplayer game.  The goal is not to make some hit game, but is instead to figure out the inner workings and logic of connectivity in order to facilitate making something fun to do with friends.",
    "Next_Steps": "Now that I have three separate implementations of multiplayer visuals, as well as the basis for a multiplayer server, the next step would be to implement some kind of game into this system.  I’ve had many ideas roll around in my head for games that would be interesting to create with this format, but none have been catchy enough to merit implementing yet.  Hopefully I’ll find both the idea and the time for something truly interesting and fun to make.<br><br>It would also be nice to create a player model maker for the 3D player server.  It is also necessary for clients to see when other players disconnect.  Right now, players who disconnect are removed from the server’s list of active players, but each client is still rendering those players at their last known location.  It would be helpful to emit a disconnection message over Socket.IO which removed that player on the client side as well.<br><br>Additionally, it would be extremely interesting to combine all three visual styles, allowing people to join the server in any visual style and see players from any of the three versions.  This would require me to reinstate the 2D version as a standalone version."
  },
  {
    "Project_Name": "Controller",
    "Project_Number": "16",
    "Overview": "I, like many people, enjoy playing games.  I personally prefer playing older-style games on emulators on my computer, but I’m not a big fan of using the keyboard as an input device.  Because of this, I have purchased a variety of game controllers to play with.  I mainly use the <a href=”https://www.8bitdo.com/sn30-pro-g-classic-or-sn30-pro-sn/”>8BitDo SN30Pro</a> and the <a href=”https://www.8bitdo.com/zero2/”>8BitDo Zero</a> game controllers, the former due to its fully-fleshed number of buttons, and the latter for its sheer portability.  However, I have been interested in making my own compact game controller ever since I stumbled upon <a href=”https://learn.adafruit.com/diy-bluetooth-gamepad/overview”>this Adafruit project</a>.  While the main product required to complete that project has been discontinued, I still strive to make my own version, especially now that the ESP32 has made it so easy to create Bluetooth devices.  ",
    "Next_Steps": "I still have a lot of work to do on testing, iterating, and refining my game controller concept.  In addition, once it is physically done, I will need to optimize its software and add plenty of cool features.  I would love to integrate it with my Router system (PINK) to offer full control of my server’s features."
  }
]